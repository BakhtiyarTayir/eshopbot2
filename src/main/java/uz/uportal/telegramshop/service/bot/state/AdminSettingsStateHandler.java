package uz.uportal.telegramshop.service.bot.state;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import uz.uportal.telegramshop.model.ShopSettings;
import uz.uportal.telegramshop.model.TelegramUser;
import uz.uportal.telegramshop.repository.TelegramUserRepository;
import uz.uportal.telegramshop.service.ShopSettingsService;
import uz.uportal.telegramshop.service.bot.core.StateHandler;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 */
@Component
public class AdminSettingsStateHandler implements StateHandler {
    
    private static final Logger logger = LoggerFactory.getLogger(AdminSettingsStateHandler.class);
    private final TelegramUserRepository telegramUserRepository;
    private final ShopSettingsService shopSettingsService;
    
    public AdminSettingsStateHandler(
            TelegramUserRepository telegramUserRepository,
            ShopSettingsService shopSettingsService) {
        this.telegramUserRepository = telegramUserRepository;
        this.shopSettingsService = shopSettingsService;
    }
    
    @Override
    public boolean canHandle(Update update) {
        return update.hasMessage() && update.getMessage().hasText();
    }
    
    @Override
    public boolean canHandleState(Update update, String state) {
        return state != null && (
                state.equals("EDITING_SHOP_CONTACTS") || 
                state.equals("EDITING_SHOP_SUPPORT") || 
                state.equals("EDITING_SHOP_ABOUT") || 
                state.equals("EDITING_SHOP_HOURS"));
    }
    
    @Override
    public BotApiMethod<?> handle(Update update) {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ handleState
        return null;
    }
    
    @Override
    public BotApiMethod<?> handleState(Update update, String state) {
        Message message = update.getMessage();
        Long chatId = message.getChatId();
        String text = message.getText();
        
        logger.info("Handling admin settings state: {} for chatId: {}", state, chatId);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        TelegramUser user = telegramUserRepository.findById(chatId).orElse(null);
        if (user == null) {
            return createTextMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!"ADMIN".equals(user.getRole()) && !"MANAGER".equals(user.getRole())) {
            user.setState(null);
            telegramUserRepository.save(user);
            return createTextMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.");
        }
        
        switch (state) {
            case "EDITING_SHOP_CONTACTS":
                return handleEditContacts(chatId, text, user);
            case "EDITING_SHOP_SUPPORT":
                return handleEditSupport(chatId, text, user);
            case "EDITING_SHOP_ABOUT":
                return handleEditAbout(chatId, text, user);
            case "EDITING_SHOP_HOURS":
                return handleEditHours(chatId, text, user);
            default:
                return null;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     * @param chatId ID —á–∞—Ç–∞
     * @param text —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleEditContacts(Long chatId, String text, TelegramUser user) {
        // –§–æ—Ä–º–∞—Ç: —Ç–µ–ª–µ—Ñ–æ–Ω|email|—Å–∞–π—Ç
        String[] parts = text.split("\\|");
        if (parts.length != 3) {
            return createTextMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *–¢–µ–ª–µ—Ñ–æ–Ω|Email|–°–∞–π—Ç*");
        }
        
        String phone = parts[0].trim();
        String email = parts[1].trim();
        String website = parts[2].trim();
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            ShopSettings settings = shopSettingsService.updateContactInfo(phone, email, website);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.setState(null);
            telegramUserRepository.save(user);
            
            return createTextMessage(chatId, "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n" +
                    "üìû –¢–µ–ª–µ—Ñ–æ–Ω: " + settings.getPhone() + "\n" +
                    "üìß Email: " + settings.getEmail() + "\n" +
                    "üåê –°–∞–π—Ç: " + settings.getWebsite());
        } catch (Exception e) {
            logger.error("Error updating shop contacts", e);
            return createTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " + e.getMessage());
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
     * @param chatId ID —á–∞—Ç–∞
     * @param text —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleEditSupport(Long chatId, String text, TelegramUser user) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            ShopSettings settings = shopSettingsService.updateSupportInfo(text);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.setState(null);
            telegramUserRepository.save(user);
            
            return createTextMessage(chatId, "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n" +
                    "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n" + settings.getSupportInfo());
        } catch (Exception e) {
            logger.error("Error updating shop support info", e);
            return createTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ: " + e.getMessage());
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ
     * @param chatId ID —á–∞—Ç–∞
     * @param text —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleEditAbout(Long chatId, String text, TelegramUser user) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            ShopSettings settings = shopSettingsService.updateAboutInfo(text);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.setState(null);
            telegramUserRepository.save(user);
            
            return createTextMessage(chatId, "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n" +
                    "–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ:\n" + settings.getAboutInfo());
        } catch (Exception e) {
            logger.error("Error updating shop about info", e);
            return createTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ: " + e.getMessage());
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã
     * @param chatId ID —á–∞—Ç–∞
     * @param text —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleEditHours(Long chatId, String text, TelegramUser user) {
        // –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        String hours = text.replace("\\n", "\n");
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            ShopSettings settings = shopSettingsService.updateWorkingHours(hours);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.setState(null);
            telegramUserRepository.save(user);
            
            return createTextMessage(chatId, "‚úÖ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n" +
                    "–ù–æ–≤—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n" + settings.getWorkingHours());
        } catch (Exception e) {
            logger.error("Error updating shop working hours", e);
            return createTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã: " + e.getMessage());
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param chatId ID —á–∞—Ç–∞
     * @param text —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private SendMessage createTextMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setParseMode("Markdown");
        return message;
    }
} 