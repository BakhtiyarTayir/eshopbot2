package uz.uportal.telegramshop.service.bot.commands;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.MaybeInaccessibleMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import uz.uportal.telegramshop.model.CartItem;
import uz.uportal.telegramshop.model.Product;
import uz.uportal.telegramshop.model.TelegramUser;
import uz.uportal.telegramshop.repository.TelegramUserRepository;
import uz.uportal.telegramshop.service.CartService;
import uz.uportal.telegramshop.service.ProductService;
import uz.uportal.telegramshop.service.bot.core.MessageSender;
import uz.uportal.telegramshop.service.bot.core.UpdateHandler;
import uz.uportal.telegramshop.service.bot.keyboards.KeyboardFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä–∑–∏–Ω–æ–π –ø–æ–∫—É–ø–æ–∫
 */
@Component
public class CartCallbackHandler implements UpdateHandler {
    
    private static final Logger logger = LoggerFactory.getLogger(CartCallbackHandler.class);
    
    private final TelegramUserRepository telegramUserRepository;
    private final CartService cartService;
    private final ProductService productService;
    private final KeyboardFactory keyboardFactory;
    private final MessageSender messageSender;
    
    public CartCallbackHandler(
            TelegramUserRepository telegramUserRepository,
            CartService cartService,
            ProductService productService,
            KeyboardFactory keyboardFactory,
            MessageSender messageSender) {
        this.telegramUserRepository = telegramUserRepository;
        this.cartService = cartService;
        this.productService = productService;
        this.keyboardFactory = keyboardFactory;
        this.messageSender = messageSender;
    }
    
    @Override
    public boolean canHandle(Update update) {
        if (!update.hasCallbackQuery()) {
            return false;
        }
        
        String callbackData = update.getCallbackQuery().getData();
        return callbackData.startsWith("add_to_cart_") || 
               callbackData.equals("clear_cart") ||
               callbackData.equals("checkout") ||
               callbackData.startsWith("remove_from_cart_") ||
               callbackData.startsWith("update_quantity_") ||
               callbackData.equals("main_menu_cart");
    }
    
    @Override
    public BotApiMethod<?> handle(Update update) {
        CallbackQuery callbackQuery = update.getCallbackQuery();
        String callbackData = callbackQuery.getData();
        
        Long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = null;
        
        try {
            MaybeInaccessibleMessage maybeMessage = callbackQuery.getMessage();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (maybeMessage instanceof Message) {
                Message message = (Message) maybeMessage;
                messageId = message.getMessageId();
            }
        } catch (Exception e) {
            logger.error("Error getting messageId from callback query", e);
        }
        
        logger.info("Handling cart callback: {} for chatId: {}", callbackData, chatId);
        
        try {
            if (callbackData.startsWith("add_to_cart_")) {
                return handleAddToCart(chatId, callbackData);
            } else if (callbackData.equals("clear_cart")) {
                return handleClearCart(chatId, messageId);
            } else if (callbackData.equals("checkout")) {
                return handleCheckout(chatId, messageId);
            } else if (callbackData.startsWith("remove_from_cart_")) {
                return handleRemoveFromCart(chatId, messageId, callbackData);
            } else if (callbackData.startsWith("update_quantity_")) {
                return handleUpdateQuantity(chatId, messageId, callbackData);
            } else if (callbackData.equals("main_menu_cart")) {
                return handleShowCart(chatId);
            }
        } catch (Exception e) {
            logger.error("Error handling cart callback: {}", e.getMessage(), e);
        }
        
        return null;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
     * 
     * @param chatId ID —á–∞—Ç–∞
     * @param callbackData –¥–∞–Ω–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å–∞
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleAddToCart(Long chatId, String callbackData) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback-–¥–∞–Ω–Ω—ã—Ö
            String productIdStr = callbackData.replace("add_to_cart_", "");
            Long productId = Long.parseLong(productIdStr);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Optional<TelegramUser> userOpt = telegramUserRepository.findById(chatId);
            if (userOpt.isEmpty()) {
                logger.warn("User with chatId {} not found", chatId);
                return createTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
            
            TelegramUser user = userOpt.get();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —à—Ç)
            boolean success = cartService.addToCart(user, productId, 1);
            
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            
            if (success) {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                Optional<Product> productOpt = productService.getProductById(productId);
                if (productOpt.isEmpty()) {
                    return createTextMessage(chatId, "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.");
                }
                
                Product product = productOpt.get();
                message.setText("‚úÖ –¢–æ–≤–∞—Ä \"" + product.getName() + "\" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.\n\n" +
                                "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏?");
                
                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É" –∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏"
                InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                
                List<InlineKeyboardButton> row1 = new ArrayList<>();
                InlineKeyboardButton cartButton = new InlineKeyboardButton();
                cartButton.setText("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É");
                cartButton.setCallbackData("main_menu_cart");
                row1.add(cartButton);
                keyboard.add(row1);
                
                List<InlineKeyboardButton> row2 = new ArrayList<>();
                InlineKeyboardButton continueButton = new InlineKeyboardButton();
                continueButton.setText("üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏");
                continueButton.setCallbackData("catalog_categories");
                row2.add(continueButton);
                keyboard.add(row2);
                
                keyboardMarkup.setKeyboard(keyboard);
                message.setReplyMarkup(keyboardMarkup);
            } else {
                message.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.");
            }
            
            return message;
        } catch (Exception e) {
            logger.error("Error adding product to cart: {}", e.getMessage(), e);
            return createTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.");
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –∫–æ—Ä–∑–∏–Ω—ã
     * 
     * @param chatId ID —á–∞—Ç–∞
     * @param messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleClearCart(Long chatId, Integer messageId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Optional<TelegramUser> userOpt = telegramUserRepository.findById(chatId);
            if (userOpt.isEmpty()) {
                logger.warn("User with chatId {} not found", chatId);
                return createTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
            
            TelegramUser user = userOpt.get();
            
            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            boolean success = cartService.clearCart(user);
            
            if (messageId != null) {
                EditMessageText editMessage = new EditMessageText();
                editMessage.setChatId(chatId);
                editMessage.setMessageId(messageId);
                
                if (success) {
                    editMessage.setText("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.");
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥"
                    InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
                    List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                    
                    List<InlineKeyboardButton> row = new ArrayList<>();
                    InlineKeyboardButton backButton = new InlineKeyboardButton();
                    backButton.setText("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥");
                    backButton.setCallbackData("catalog_categories");
                    row.add(backButton);
                    keyboard.add(row);
                    
                    keyboardMarkup.setKeyboard(keyboard);
                    editMessage.setReplyMarkup(keyboardMarkup);
                } else {
                    editMessage.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                }
                
                return editMessage;
            } else {
                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                
                if (success) {
                    message.setText("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.");
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥"
                    InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
                    List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                    
                    List<InlineKeyboardButton> row = new ArrayList<>();
                    InlineKeyboardButton backButton = new InlineKeyboardButton();
                    backButton.setText("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥");
                    backButton.setCallbackData("catalog_categories");
                    row.add(backButton);
                    keyboard.add(row);
                    
                    keyboardMarkup.setKeyboard(keyboard);
                    message.setReplyMarkup(keyboardMarkup);
                } else {
                    message.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                }
                
                return message;
            }
        } catch (Exception e) {
            logger.error("Error clearing cart: {}", e.getMessage(), e);
            return createTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã.");
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
     * 
     * @param chatId ID —á–∞—Ç–∞
     * @param messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleCheckout(Long chatId, Integer messageId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Optional<TelegramUser> userOpt = telegramUserRepository.findById(chatId);
            if (userOpt.isEmpty()) {
                logger.warn("User with chatId {} not found", chatId);
                return createTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
            
            TelegramUser user = userOpt.get();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞
            if (cartService.isCartEmpty(user)) {
                return createTextMessage(chatId, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.");
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            user.setState("WAITING_FOR_ADDRESS");
            telegramUserRepository.save(user);
            
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:");
            
            return message;
        } catch (Exception e) {
            logger.error("Error starting checkout process: {}", e.getMessage(), e);
            return createTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.");
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
     * 
     * @param chatId ID —á–∞—Ç–∞
     * @param messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param callbackData –¥–∞–Ω–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å–∞
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleRemoveFromCart(Long chatId, Integer messageId, String callbackData) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback-–¥–∞–Ω–Ω—ã—Ö
            String productIdStr = callbackData.replace("remove_from_cart_", "");
            Long productId = Long.parseLong(productIdStr);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Optional<TelegramUser> userOpt = telegramUserRepository.findById(chatId);
            if (userOpt.isEmpty()) {
                logger.warn("User with chatId {} not found", chatId);
                return createTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
            
            TelegramUser user = userOpt.get();
            
            // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            boolean success = cartService.removeFromCart(user, productId);
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ
            String cartInfo = cartService.getCartInfo(chatId);
            
            if (messageId != null) {
                EditMessageText editMessage = new EditMessageText();
                editMessage.setChatId(chatId);
                editMessage.setMessageId(messageId);
                
                if (success) {
                    if (cartInfo.isEmpty()) {
                        editMessage.setText("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.");
                        
                        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥"
                        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
                        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                        
                        List<InlineKeyboardButton> row = new ArrayList<>();
                        InlineKeyboardButton backButton = new InlineKeyboardButton();
                        backButton.setText("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥");
                        backButton.setCallbackData("catalog_categories");
                        row.add(backButton);
                        keyboard.add(row);
                        
                        keyboardMarkup.setKeyboard(keyboard);
                        editMessage.setReplyMarkup(keyboardMarkup);
                    } else {
                        editMessage.setText("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n" + cartInfo);
                        editMessage.setReplyMarkup(keyboardFactory.createCartKeyboard());
                    }
                } else {
                    editMessage.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                }
                
                return editMessage;
            } else {
                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                
                if (success) {
                    if (cartInfo.isEmpty()) {
                        message.setText("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.");
                        
                        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥"
                        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
                        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                        
                        List<InlineKeyboardButton> row = new ArrayList<>();
                        InlineKeyboardButton backButton = new InlineKeyboardButton();
                        backButton.setText("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥");
                        backButton.setCallbackData("catalog_categories");
                        row.add(backButton);
                        keyboard.add(row);
                        
                        keyboardMarkup.setKeyboard(keyboard);
                        message.setReplyMarkup(keyboardMarkup);
                    } else {
                        message.setText("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n" + cartInfo);
                        message.setReplyMarkup(keyboardFactory.createCartKeyboard());
                    }
                } else {
                    message.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                }
                
                return message;
            }
        } catch (Exception e) {
            logger.error("Error removing product from cart: {}", e.getMessage(), e);
            return createTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.");
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
     * 
     * @param chatId ID —á–∞—Ç–∞
     * @param messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param callbackData –¥–∞–Ω–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å–∞
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleUpdateQuantity(Long chatId, Integer messageId, String callbackData) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback (—Ñ–æ—Ä–º–∞—Ç: update_quantity_productId_quantity)
            String[] parts = callbackData.split("_");
            if (parts.length != 4) {
                logger.warn("Invalid callback data format: {}", callbackData);
                return createTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
            
            Long productId = Long.parseLong(parts[2]);
            Integer quantity = Integer.parseInt(parts[3]);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Optional<TelegramUser> userOpt = telegramUserRepository.findById(chatId);
            if (userOpt.isEmpty()) {
                logger.warn("User with chatId {} not found", chatId);
                return createTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
            
            TelegramUser user = userOpt.get();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            boolean success = cartService.updateQuantity(user, productId, quantity);
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ
            String cartInfo = cartService.getCartInfo(chatId);
            
            if (messageId != null) {
                EditMessageText editMessage = new EditMessageText();
                editMessage.setChatId(chatId);
                editMessage.setMessageId(messageId);
                
                if (success) {
                    editMessage.setText("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n" + cartInfo);
                    editMessage.setReplyMarkup(keyboardFactory.createCartKeyboard());
                } else {
                    editMessage.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.");
                }
                
                return editMessage;
            } else {
                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                
                if (success) {
                    message.setText("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n" + cartInfo);
                    message.setReplyMarkup(keyboardFactory.createCartKeyboard());
                } else {
                    message.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.");
                }
                
                return message;
            }
        } catch (Exception e) {
            logger.error("Error updating product quantity: {}", e.getMessage(), e);
            return createTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞.");
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã
     * 
     * @param chatId ID —á–∞—Ç–∞
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleShowCart(Long chatId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Optional<TelegramUser> userOpt = telegramUserRepository.findById(chatId);
            if (userOpt.isEmpty()) {
                logger.warn("User with chatId {} not found", chatId);
                return createTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
            
            TelegramUser user = userOpt.get();
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ
            String cartInfo = cartService.getCartInfo(chatId);
            
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            
            if (cartInfo.isEmpty()) {
                message.setText("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.");
                
                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥"
                InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                
                List<InlineKeyboardButton> row = new ArrayList<>();
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥");
                backButton.setCallbackData("catalog_categories");
                row.add(backButton);
                keyboard.add(row);
                
                keyboardMarkup.setKeyboard(keyboard);
                message.setReplyMarkup(keyboardMarkup);
            } else {
                message.setText("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n" + cartInfo);
                message.setReplyMarkup(keyboardFactory.createCartKeyboard());
            }
            
            return message;
        } catch (Exception e) {
            logger.error("Error showing cart: {}", e.getMessage(), e);
            return createTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã.");
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param chatId ID —á–∞—Ç–∞
     * @param text —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private SendMessage createTextMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        return message;
    }
} 