package uz.uportal.telegramshop.service.bot.commands;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.MaybeInaccessibleMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import uz.uportal.telegramshop.model.Category;
import uz.uportal.telegramshop.model.Product;
import uz.uportal.telegramshop.repository.TelegramUserRepository;
import uz.uportal.telegramshop.service.CategoryService;
import uz.uportal.telegramshop.service.ProductService;
import uz.uportal.telegramshop.service.bot.core.MessageSender;
import uz.uportal.telegramshop.service.bot.core.UpdateHandler;
import uz.uportal.telegramshop.service.bot.keyboards.KeyboardFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤
 */
@Component
public class CatalogCallbackHandler implements UpdateHandler {
    
    private static final Logger logger = LoggerFactory.getLogger(CatalogCallbackHandler.class);
    
    private final TelegramUserRepository telegramUserRepository;
    private final CategoryService categoryService;
    private final ProductService productService;
    private final KeyboardFactory keyboardFactory;
    private final MessageSender messageSender;
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    private static final int PRODUCTS_PAGE_SIZE = 3;
    
    public CatalogCallbackHandler(
            TelegramUserRepository telegramUserRepository,
            CategoryService categoryService,
            ProductService productService,
            KeyboardFactory keyboardFactory,
            MessageSender messageSender) {
        this.telegramUserRepository = telegramUserRepository;
        this.categoryService = categoryService;
        this.productService = productService;
        this.keyboardFactory = keyboardFactory;
        this.messageSender = messageSender;
    }
    
    @Override
    public boolean canHandle(Update update) {
        if (!update.hasCallbackQuery()) {
            return false;
        }
        
        String callbackData = update.getCallbackQuery().getData();
        return callbackData.startsWith("catalog_category_") || 
               callbackData.startsWith("catalog_products_page_") ||
               callbackData.equals("catalog_categories") ||
               callbackData.equals("back_to_catalog");
    }
    
    @Override
    public BotApiMethod<?> handle(Update update) {
        CallbackQuery callbackQuery = update.getCallbackQuery();
        String callbackData = callbackQuery.getData();
        
        Long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = null;
        
        try {
            MaybeInaccessibleMessage maybeMessage = callbackQuery.getMessage();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (maybeMessage instanceof Message) {
                Message message = (Message) maybeMessage;
                messageId = message.getMessageId();
            }
        } catch (Exception e) {
            logger.error("Error getting messageId from callback query", e);
        }
        
        logger.info("Handling catalog callback: {} for chatId: {}", callbackData, chatId);
        
        try {
            if (callbackData.startsWith("catalog_category_")) {
                return messageId != null 
                    ? handleCategoryProducts(chatId, messageId, callbackData)
                    : handleCategoryProducts(chatId, callbackData);
            } else if (callbackData.startsWith("catalog_products_page_")) {
                // –§–æ—Ä–º–∞—Ç: catalog_products_page_{categoryId}_{page}
                return messageId != null 
                    ? handleProductsInCategoryPage(chatId, messageId, callbackData)
                    : handleProductsInCategoryPage(chatId, callbackData);
            } else if (callbackData.equals("catalog_categories")) {
                return messageId != null 
                    ? handleCatalogCategories(chatId, messageId)
                    : handleCatalogCategories(chatId);
            } else {
                logger.warn("Unhandled catalog callback: {}", callbackData);
                return null;
            }
        } catch (Exception e) {
            logger.error("Error handling catalog callback: {}", e.getMessage(), e);
            return createTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º EditMessageText
     * @param chatId ID —á–∞—Ç–∞
     * @param messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param callbackData –¥–∞–Ω–Ω—ã–µ callback
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleCategoryProducts(Long chatId, Integer messageId, String callbackData) {
        Long categoryId = Long.parseLong(callbackData.replace("catalog_category_", ""));
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        Optional<Category> categoryOpt = categoryService.getCategoryById(categoryId);
        if (categoryOpt.isEmpty()) {
            EditMessageText editMessageText = new EditMessageText();
            editMessageText.setChatId(chatId);
            editMessageText.setMessageId(messageId);
            editMessageText.setText("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return editMessageText;
        }
        
        Category category = categoryOpt.get();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        int page = 1;
        Pageable pageable = PageRequest.of(page - 1, PRODUCTS_PAGE_SIZE);
        Page<Product> productsPage = productService.getProductsByCategory(category, pageable);
        List<Product> products = productsPage.getContent();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        StringBuilder headerText = new StringBuilder();
        headerText.append("üõç *–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"").append(category.getName()).append("\"*\n\n");
        
        if (products.isEmpty()) {
            headerText.append("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.");
            
            EditMessageText editMessageText = new EditMessageText();
            editMessageText.setChatId(chatId);
            editMessageText.setMessageId(messageId);
            editMessageText.setText(headerText.toString());
            editMessageText.setParseMode("Markdown");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º");
            backButton.setCallbackData("catalog_categories");
            backRow.add(backButton);
            keyboard.add(backRow);
            keyboardMarkup.setKeyboard(keyboard);
            
            editMessageText.setReplyMarkup(keyboardMarkup);
            
            return editMessageText;
        } else {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            headerText.append("–°—Ç—Ä–∞–Ω–∏—Ü–∞ ").append(page).append(" –∏–∑ ").append(productsPage.getTotalPages()).append("\n\n");
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            EditMessageText editMessageText = new EditMessageText();
            editMessageText.setChatId(chatId);
            editMessageText.setMessageId(messageId);
            editMessageText.setText(headerText.toString());
            editMessageText.setParseMode("Markdown");
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            InlineKeyboardMarkup headerKeyboardMarkup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> headerKeyboard = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º");
            backButton.setCallbackData("catalog_categories");
            backRow.add(backButton);
            headerKeyboard.add(backRow);
            headerKeyboardMarkup.setKeyboard(headerKeyboard);
            
            editMessageText.setReplyMarkup(headerKeyboardMarkup);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            try {
                messageSender.executeEditMessage(editMessageText);
            } catch (Exception e) {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {}", e.getMessage());
            }
            
            // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for (Product product : products) {
                try {
                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                    StringBuilder productText = new StringBuilder();
                    productText.append("*").append(product.getName()).append("*\n");
                    productText.append("üí∞ –¶–µ–Ω–∞: ").append(product.getPrice()).append(" —Ä—É–±.\n");
                    productText.append("üì¶ –í –Ω–∞–ª–∏—á–∏–∏: ").append(product.getStock()).append(" —à—Ç.\n");
                    if (product.getDescription() != null && !product.getDescription().isEmpty()) {
                        productText.append("üìù –û–ø–∏—Å–∞–Ω–∏–µ: ").append(product.getDescription()).append("\n");
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
                    InlineKeyboardMarkup productKeyboard = new InlineKeyboardMarkup();
                    List<List<InlineKeyboardButton>> productKeyboardRows = new ArrayList<>();
                    List<InlineKeyboardButton> addToCartRow = new ArrayList<>();
                    InlineKeyboardButton addToCartButton = new InlineKeyboardButton();
                    addToCartButton.setText("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É");
                    addToCartButton.setCallbackData("add_to_cart_" + product.getId());
                    addToCartRow.add(addToCartButton);
                    productKeyboardRows.add(addToCartRow);
                    productKeyboard.setKeyboard(productKeyboardRows);
                    
                    // –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                    if (product.getImageUrl() != null && !product.getImageUrl().isEmpty()) {
                        SendPhoto sendPhoto = new SendPhoto();
                        sendPhoto.setChatId(chatId);
                        sendPhoto.setPhoto(new InputFile(product.getImageUrl()));
                        sendPhoto.setCaption(productText.toString());
                        sendPhoto.setParseMode("Markdown");
                        sendPhoto.setReplyMarkup(productKeyboard);
                        
                        messageSender.executePhoto(sendPhoto);
                    } else {
                        // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        SendMessage sendMessage = new SendMessage();
                        sendMessage.setChatId(chatId);
                        sendMessage.setText(productText.toString());
                        sendMessage.setParseMode("Markdown");
                        sendMessage.setReplyMarkup(productKeyboard);
                        
                        messageSender.executeMessage(sendMessage);
                    }
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞: {}", e.getMessage());
                }
            }
            
            // –ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if (productsPage.getTotalPages() > 1) {
                try {
                    SendMessage paginationMessage = new SendMessage();
                    paginationMessage.setChatId(chatId);
                    paginationMessage.setText("üìÑ *–°—Ç—Ä–∞–Ω–∏—Ü—ã*");
                    paginationMessage.setParseMode("Markdown");
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                    InlineKeyboardMarkup paginationKeyboardMarkup = new InlineKeyboardMarkup();
                    List<List<InlineKeyboardButton>> paginationKeyboard = new ArrayList<>();
                    List<InlineKeyboardButton> paginationRow = new ArrayList<>();
                    
                    if (page > 1) {
                        InlineKeyboardButton prevButton = new InlineKeyboardButton();
                        prevButton.setText("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è");
                        prevButton.setCallbackData("catalog_products_page_" + categoryId + "_" + (page - 1));
                        paginationRow.add(prevButton);
                    }
                    
                    if (page < productsPage.getTotalPages()) {
                        InlineKeyboardButton nextButton = new InlineKeyboardButton();
                        nextButton.setText("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è");
                        nextButton.setCallbackData("catalog_products_page_" + categoryId + "_" + (page + 1));
                        paginationRow.add(nextButton);
                    }
                    
                    paginationKeyboard.add(paginationRow);
                    paginationKeyboardMarkup.setKeyboard(paginationKeyboard);
                    paginationMessage.setReplyMarkup(paginationKeyboardMarkup);
                    
                    messageSender.executeMessage(paginationMessage);
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {}", e.getMessage());
                }
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            return null;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SendMessage
     * @param chatId ID —á–∞—Ç–∞
     * @param callbackData –¥–∞–Ω–Ω—ã–µ callback
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleCategoryProducts(Long chatId, String callbackData) {
        Long categoryId = Long.parseLong(callbackData.replace("catalog_category_", ""));
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        Optional<Category> categoryOpt = categoryService.getCategoryById(categoryId);
        if (categoryOpt.isEmpty()) {
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(chatId);
            sendMessage.setText("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return sendMessage;
        }
        
        Category category = categoryOpt.get();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        int page = 1;
        Pageable pageable = PageRequest.of(page - 1, PRODUCTS_PAGE_SIZE);
        Page<Product> productsPage = productService.getProductsByCategory(category, pageable);
        List<Product> products = productsPage.getContent();
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        StringBuilder headerText = new StringBuilder();
        headerText.append("üõç *–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"").append(category.getName()).append("\"*\n\n");
        
        if (products.isEmpty()) {
            headerText.append("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.");
            
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(chatId);
            sendMessage.setText(headerText.toString());
            sendMessage.setParseMode("Markdown");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º");
            backButton.setCallbackData("catalog_categories");
            backRow.add(backButton);
            keyboard.add(backRow);
            keyboardMarkup.setKeyboard(keyboard);
            
            sendMessage.setReplyMarkup(keyboardMarkup);
            
            return sendMessage;
        } else {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            headerText.append("–°—Ç—Ä–∞–Ω–∏—Ü–∞ ").append(page).append(" –∏–∑ ").append(productsPage.getTotalPages()).append("\n\n");
            
            SendMessage headerMessage = new SendMessage();
            headerMessage.setChatId(chatId);
            headerMessage.setText(headerText.toString());
            headerMessage.setParseMode("Markdown");
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            InlineKeyboardMarkup headerKeyboardMarkup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> headerKeyboard = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º");
            backButton.setCallbackData("catalog_categories");
            backRow.add(backButton);
            headerKeyboard.add(backRow);
            headerKeyboardMarkup.setKeyboard(headerKeyboard);
            
            headerMessage.setReplyMarkup(headerKeyboardMarkup);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            try {
                messageSender.executeMessage(headerMessage);
            } catch (Exception e) {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {}", e.getMessage());
            }
            
            // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for (Product product : products) {
                try {
                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                    StringBuilder productText = new StringBuilder();
                    productText.append("*").append(product.getName()).append("*\n");
                    productText.append("üí∞ –¶–µ–Ω–∞: ").append(product.getPrice()).append(" —Ä—É–±.\n");
                    productText.append("üì¶ –í –Ω–∞–ª–∏—á–∏–∏: ").append(product.getStock()).append(" —à—Ç.\n");
                    if (product.getDescription() != null && !product.getDescription().isEmpty()) {
                        productText.append("üìù –û–ø–∏—Å–∞–Ω–∏–µ: ").append(product.getDescription()).append("\n");
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
                    InlineKeyboardMarkup productKeyboard = new InlineKeyboardMarkup();
                    List<List<InlineKeyboardButton>> productKeyboardRows = new ArrayList<>();
                    List<InlineKeyboardButton> addToCartRow = new ArrayList<>();
                    InlineKeyboardButton addToCartButton = new InlineKeyboardButton();
                    addToCartButton.setText("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É");
                    addToCartButton.setCallbackData("add_to_cart_" + product.getId());
                    addToCartRow.add(addToCartButton);
                    productKeyboardRows.add(addToCartRow);
                    productKeyboard.setKeyboard(productKeyboardRows);
                    
                    // –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                    if (product.getImageUrl() != null && !product.getImageUrl().isEmpty()) {
                        SendPhoto sendPhoto = new SendPhoto();
                        sendPhoto.setChatId(chatId);
                        sendPhoto.setPhoto(new InputFile(product.getImageUrl()));
                        sendPhoto.setCaption(productText.toString());
                        sendPhoto.setParseMode("Markdown");
                        sendPhoto.setReplyMarkup(productKeyboard);
                        
                        messageSender.executePhoto(sendPhoto);
                    } else {
                        // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        SendMessage sendMessage = new SendMessage();
                        sendMessage.setChatId(chatId);
                        sendMessage.setText(productText.toString());
                        sendMessage.setParseMode("Markdown");
                        sendMessage.setReplyMarkup(productKeyboard);
                        
                        messageSender.executeMessage(sendMessage);
                    }
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞: {}", e.getMessage());
                }
            }
            
            // –ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if (productsPage.getTotalPages() > 1) {
                try {
                    SendMessage paginationMessage = new SendMessage();
                    paginationMessage.setChatId(chatId);
                    paginationMessage.setText("üìÑ *–°—Ç—Ä–∞–Ω–∏—Ü—ã*");
                    paginationMessage.setParseMode("Markdown");
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                    InlineKeyboardMarkup paginationKeyboardMarkup = new InlineKeyboardMarkup();
                    List<List<InlineKeyboardButton>> paginationKeyboard = new ArrayList<>();
                    List<InlineKeyboardButton> paginationRow = new ArrayList<>();
                    
                    if (page > 1) {
                        InlineKeyboardButton prevButton = new InlineKeyboardButton();
                        prevButton.setText("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è");
                        prevButton.setCallbackData("catalog_products_page_" + categoryId + "_" + (page - 1));
                        paginationRow.add(prevButton);
                    }
                    
                    if (page < productsPage.getTotalPages()) {
                        InlineKeyboardButton nextButton = new InlineKeyboardButton();
                        nextButton.setText("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è");
                        nextButton.setCallbackData("catalog_products_page_" + categoryId + "_" + (page + 1));
                        paginationRow.add(nextButton);
                    }
                    
                    paginationKeyboard.add(paginationRow);
                    paginationKeyboardMarkup.setKeyboard(paginationKeyboard);
                    paginationMessage.setReplyMarkup(paginationKeyboardMarkup);
                    
                    messageSender.executeMessage(paginationMessage);
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {}", e.getMessage());
                }
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            return null;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º EditMessageText
     * @param chatId ID —á–∞—Ç–∞
     * @param messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param callbackData –¥–∞–Ω–Ω—ã–µ callback
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleProductsInCategoryPage(Long chatId, Integer messageId, String callbackData) {
        // –§–æ—Ä–º–∞—Ç: catalog_products_page_{categoryId}_{page}
        String[] parts = callbackData.replace("catalog_products_page_", "").split("_");
        Long categoryId = Long.parseLong(parts[0]);
        int page = Integer.parseInt(parts[1]);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        Optional<Category> categoryOpt = categoryService.getCategoryById(categoryId);
        if (categoryOpt.isEmpty()) {
            EditMessageText editMessageText = new EditMessageText();
            editMessageText.setChatId(chatId);
            editMessageText.setMessageId(messageId);
            editMessageText.setText("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return editMessageText;
        }
        
        Category category = categoryOpt.get();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        Pageable pageable = PageRequest.of(page - 1, PRODUCTS_PAGE_SIZE);
        Page<Product> productsPage = productService.getProductsByCategory(category, pageable);
        List<Product> products = productsPage.getContent();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        StringBuilder headerText = new StringBuilder();
        headerText.append("üõç *–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"").append(category.getName()).append("\"*\n\n");
        
        if (products.isEmpty()) {
            headerText.append("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.");
            
            EditMessageText editMessageText = new EditMessageText();
            editMessageText.setChatId(chatId);
            editMessageText.setMessageId(messageId);
            editMessageText.setText(headerText.toString());
            editMessageText.setParseMode("Markdown");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º");
            backButton.setCallbackData("catalog_categories");
            backRow.add(backButton);
            keyboard.add(backRow);
            keyboardMarkup.setKeyboard(keyboard);
            
            editMessageText.setReplyMarkup(keyboardMarkup);
            
            return editMessageText;
        } else {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            headerText.append("–°—Ç—Ä–∞–Ω–∏—Ü–∞ ").append(page).append(" –∏–∑ ").append(productsPage.getTotalPages()).append("\n\n");
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            EditMessageText editMessageText = new EditMessageText();
            editMessageText.setChatId(chatId);
            editMessageText.setMessageId(messageId);
            editMessageText.setText(headerText.toString());
            editMessageText.setParseMode("Markdown");
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            InlineKeyboardMarkup headerKeyboardMarkup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> headerKeyboard = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º");
            backButton.setCallbackData("catalog_categories");
            backRow.add(backButton);
            headerKeyboard.add(backRow);
            headerKeyboardMarkup.setKeyboard(headerKeyboard);
            
            editMessageText.setReplyMarkup(headerKeyboardMarkup);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            try {
                messageSender.executeEditMessage(editMessageText);
            } catch (Exception e) {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {}", e.getMessage());
            }
            
            // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for (Product product : products) {
                try {
                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                    StringBuilder productText = new StringBuilder();
                    productText.append("*").append(product.getName()).append("*\n");
                    productText.append("üí∞ –¶–µ–Ω–∞: ").append(product.getPrice()).append(" —Ä—É–±.\n");
                    productText.append("üì¶ –í –Ω–∞–ª–∏—á–∏–∏: ").append(product.getStock()).append(" —à—Ç.\n");
                    if (product.getDescription() != null && !product.getDescription().isEmpty()) {
                        productText.append("üìù –û–ø–∏—Å–∞–Ω–∏–µ: ").append(product.getDescription()).append("\n");
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
                    InlineKeyboardMarkup productKeyboard = new InlineKeyboardMarkup();
                    List<List<InlineKeyboardButton>> productKeyboardRows = new ArrayList<>();
                    List<InlineKeyboardButton> addToCartRow = new ArrayList<>();
                    InlineKeyboardButton addToCartButton = new InlineKeyboardButton();
                    addToCartButton.setText("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É");
                    addToCartButton.setCallbackData("add_to_cart_" + product.getId());
                    addToCartRow.add(addToCartButton);
                    productKeyboardRows.add(addToCartRow);
                    productKeyboard.setKeyboard(productKeyboardRows);
                    
                    // –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                    if (product.getImageUrl() != null && !product.getImageUrl().isEmpty()) {
                        SendPhoto sendPhoto = new SendPhoto();
                        sendPhoto.setChatId(chatId);
                        sendPhoto.setPhoto(new InputFile(product.getImageUrl()));
                        sendPhoto.setCaption(productText.toString());
                        sendPhoto.setParseMode("Markdown");
                        sendPhoto.setReplyMarkup(productKeyboard);
                        
                        messageSender.executePhoto(sendPhoto);
                    } else {
                        // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        SendMessage sendMessage = new SendMessage();
                        sendMessage.setChatId(chatId);
                        sendMessage.setText(productText.toString());
                        sendMessage.setParseMode("Markdown");
                        sendMessage.setReplyMarkup(productKeyboard);
                        
                        messageSender.executeMessage(sendMessage);
                    }
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞: {}", e.getMessage());
                }
            }
            
            // –ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if (productsPage.getTotalPages() > 1) {
                try {
                    SendMessage paginationMessage = new SendMessage();
                    paginationMessage.setChatId(chatId);
                    paginationMessage.setText("üìÑ *–°—Ç—Ä–∞–Ω–∏—Ü—ã*");
                    paginationMessage.setParseMode("Markdown");
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                    InlineKeyboardMarkup paginationKeyboardMarkup = new InlineKeyboardMarkup();
                    List<List<InlineKeyboardButton>> paginationKeyboard = new ArrayList<>();
                    List<InlineKeyboardButton> paginationRow = new ArrayList<>();
                    
                    if (page > 1) {
                        InlineKeyboardButton prevButton = new InlineKeyboardButton();
                        prevButton.setText("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è");
                        prevButton.setCallbackData("catalog_products_page_" + categoryId + "_" + (page - 1));
                        paginationRow.add(prevButton);
                    }
                    
                    if (page < productsPage.getTotalPages()) {
                        InlineKeyboardButton nextButton = new InlineKeyboardButton();
                        nextButton.setText("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è");
                        nextButton.setCallbackData("catalog_products_page_" + categoryId + "_" + (page + 1));
                        paginationRow.add(nextButton);
                    }
                    
                    paginationKeyboard.add(paginationRow);
                    paginationKeyboardMarkup.setKeyboard(paginationKeyboard);
                    paginationMessage.setReplyMarkup(paginationKeyboardMarkup);
                    
                    messageSender.executeMessage(paginationMessage);
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {}", e.getMessage());
                }
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            return null;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SendMessage
     * @param chatId ID —á–∞—Ç–∞
     * @param callbackData –¥–∞–Ω–Ω—ã–µ callback
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleProductsInCategoryPage(Long chatId, String callbackData) {
        // –§–æ—Ä–º–∞—Ç: catalog_products_page_{categoryId}_{page}
        String[] parts = callbackData.replace("catalog_products_page_", "").split("_");
        Long categoryId = Long.parseLong(parts[0]);
        int page = Integer.parseInt(parts[1]);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        Optional<Category> categoryOpt = categoryService.getCategoryById(categoryId);
        if (categoryOpt.isEmpty()) {
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(chatId);
            sendMessage.setText("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return sendMessage;
        }
        
        Category category = categoryOpt.get();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        Pageable pageable = PageRequest.of(page - 1, PRODUCTS_PAGE_SIZE);
        Page<Product> productsPage = productService.getProductsByCategory(category, pageable);
        List<Product> products = productsPage.getContent();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        StringBuilder headerText = new StringBuilder();
        headerText.append("üõç *–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"").append(category.getName()).append("\"*\n\n");
        
        if (products.isEmpty()) {
            headerText.append("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.");
            
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(chatId);
            sendMessage.setText(headerText.toString());
            sendMessage.setParseMode("Markdown");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º");
            backButton.setCallbackData("catalog_categories");
            backRow.add(backButton);
            keyboard.add(backRow);
            keyboardMarkup.setKeyboard(keyboard);
            
            sendMessage.setReplyMarkup(keyboardMarkup);
            
            return sendMessage;
        } else {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            headerText.append("–°—Ç—Ä–∞–Ω–∏—Ü–∞ ").append(page).append(" –∏–∑ ").append(productsPage.getTotalPages()).append("\n\n");
            
            SendMessage headerMessage = new SendMessage();
            headerMessage.setChatId(chatId);
            headerMessage.setText(headerText.toString());
            headerMessage.setParseMode("Markdown");
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            InlineKeyboardMarkup headerKeyboardMarkup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> headerKeyboard = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º");
            backButton.setCallbackData("catalog_categories");
            backRow.add(backButton);
            headerKeyboard.add(backRow);
            headerKeyboardMarkup.setKeyboard(headerKeyboard);
            
            headerMessage.setReplyMarkup(headerKeyboardMarkup);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            try {
                messageSender.executeMessage(headerMessage);
            } catch (Exception e) {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {}", e.getMessage());
            }
            
            // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for (Product product : products) {
                try {
                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                    StringBuilder productText = new StringBuilder();
                    productText.append("*").append(product.getName()).append("*\n");
                    productText.append("üí∞ –¶–µ–Ω–∞: ").append(product.getPrice()).append(" —Ä—É–±.\n");
                    productText.append("üì¶ –í –Ω–∞–ª–∏—á–∏–∏: ").append(product.getStock()).append(" —à—Ç.\n");
                    if (product.getDescription() != null && !product.getDescription().isEmpty()) {
                        productText.append("üìù –û–ø–∏—Å–∞–Ω–∏–µ: ").append(product.getDescription()).append("\n");
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
                    InlineKeyboardMarkup productKeyboard = new InlineKeyboardMarkup();
                    List<List<InlineKeyboardButton>> productKeyboardRows = new ArrayList<>();
                    List<InlineKeyboardButton> addToCartRow = new ArrayList<>();
                    InlineKeyboardButton addToCartButton = new InlineKeyboardButton();
                    addToCartButton.setText("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É");
                    addToCartButton.setCallbackData("add_to_cart_" + product.getId());
                    addToCartRow.add(addToCartButton);
                    productKeyboardRows.add(addToCartRow);
                    productKeyboard.setKeyboard(productKeyboardRows);
                    
                    // –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                    if (product.getImageUrl() != null && !product.getImageUrl().isEmpty()) {
                        SendPhoto sendPhoto = new SendPhoto();
                        sendPhoto.setChatId(chatId);
                        sendPhoto.setPhoto(new InputFile(product.getImageUrl()));
                        sendPhoto.setCaption(productText.toString());
                        sendPhoto.setParseMode("Markdown");
                        sendPhoto.setReplyMarkup(productKeyboard);
                        
                        messageSender.executePhoto(sendPhoto);
                    } else {
                        // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        SendMessage sendMessage = new SendMessage();
                        sendMessage.setChatId(chatId);
                        sendMessage.setText(productText.toString());
                        sendMessage.setParseMode("Markdown");
                        sendMessage.setReplyMarkup(productKeyboard);
                        
                        messageSender.executeMessage(sendMessage);
                    }
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞: {}", e.getMessage());
                }
            }
            
            // –ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if (productsPage.getTotalPages() > 1) {
                try {
                    SendMessage paginationMessage = new SendMessage();
                    paginationMessage.setChatId(chatId);
                    paginationMessage.setText("üìÑ *–°—Ç—Ä–∞–Ω–∏—Ü—ã*");
                    paginationMessage.setParseMode("Markdown");
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                    InlineKeyboardMarkup paginationKeyboardMarkup = new InlineKeyboardMarkup();
                    List<List<InlineKeyboardButton>> paginationKeyboard = new ArrayList<>();
                    List<InlineKeyboardButton> paginationRow = new ArrayList<>();
                    
                    if (page > 1) {
                        InlineKeyboardButton prevButton = new InlineKeyboardButton();
                        prevButton.setText("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è");
                        prevButton.setCallbackData("catalog_products_page_" + categoryId + "_" + (page - 1));
                        paginationRow.add(prevButton);
                    }
                    
                    if (page < productsPage.getTotalPages()) {
                        InlineKeyboardButton nextButton = new InlineKeyboardButton();
                        nextButton.setText("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è");
                        nextButton.setCallbackData("catalog_products_page_" + categoryId + "_" + (page + 1));
                        paginationRow.add(nextButton);
                    }
                    
                    paginationKeyboard.add(paginationRow);
                    paginationKeyboardMarkup.setKeyboard(paginationKeyboard);
                    paginationMessage.setReplyMarkup(paginationKeyboardMarkup);
                    
                    messageSender.executeMessage(paginationMessage);
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {}", e.getMessage());
                }
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            return null;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º EditMessageText
     * @param chatId ID —á–∞—Ç–∞
     * @param messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleCatalogCategories(Long chatId, Integer messageId) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        List<Category> categories = categoryService.getAllCategories();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        StringBuilder messageText = new StringBuilder();
        messageText.append("üìã *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤*\n\n");
        messageText.append("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n");
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        InlineKeyboardMarkup keyboardMarkup = keyboardFactory.createCatalogKeyboard(categories);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        EditMessageText editMessageText = new EditMessageText();
        editMessageText.setChatId(chatId);
        editMessageText.setMessageId(messageId);
        editMessageText.setText(messageText.toString());
        editMessageText.setParseMode("Markdown");
        editMessageText.setReplyMarkup(keyboardMarkup);
        
        return editMessageText;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SendMessage
     * @param chatId ID —á–∞—Ç–∞
     * @return –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     */
    private BotApiMethod<?> handleCatalogCategories(Long chatId) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        List<Category> categories = categoryService.getAllCategories();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        StringBuilder messageText = new StringBuilder();
        messageText.append("üìã *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤*\n\n");
        messageText.append("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n");
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        InlineKeyboardMarkup keyboardMarkup = keyboardFactory.createCatalogKeyboard(categories);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(messageText.toString());
        sendMessage.setParseMode("Markdown");
        sendMessage.setReplyMarkup(keyboardMarkup);
        
        return sendMessage;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param chatId ID —á–∞—Ç–∞
     * @param text —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private SendMessage createTextMessage(Long chatId, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(text);
        return sendMessage;
    }
} 