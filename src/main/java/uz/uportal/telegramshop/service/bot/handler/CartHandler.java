package uz.uportal.telegramshop.service.bot.handler;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import uz.uportal.telegramshop.model.CartItem;
import uz.uportal.telegramshop.model.TelegramUser;
import uz.uportal.telegramshop.service.CartService;
import uz.uportal.telegramshop.repository.TelegramUserRepository;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∫–æ—Ä–∑–∏–Ω—ã
 */
@Component
public class CartHandler {
    
    private static final Logger logger = LoggerFactory.getLogger(CartHandler.class);
    
    private final CartService cartService;
    private final OrderHandler orderHandler;
    private final TelegramUserRepository userRepository;
    
    public CartHandler(CartService cartService, OrderHandler orderHandler, TelegramUserRepository userRepository) {
        this.cartService = cartService;
        this.orderHandler = orderHandler;
        this.userRepository = userRepository;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param chatId ID —á–∞—Ç–∞
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã
     */
    public SendMessage showCart(Long chatId, TelegramUser user) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        
        List<CartItem> cartItems = cartService.getCartItems(user);
        
        if (cartItems.isEmpty()) {
            message.setText("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥
            InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
            
            List<InlineKeyboardButton> catalogRow = new ArrayList<>();
            InlineKeyboardButton catalogButton = new InlineKeyboardButton();
            catalogButton.setText("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥");
            catalogButton.setCallbackData("catalog");
            catalogRow.add(catalogButton);
            rowsInline.add(catalogRow);
            
            markupInline.setKeyboard(rowsInline);
            message.setReplyMarkup(markupInline);
            
            return message;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã
        StringBuilder cartText = new StringBuilder("üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n");
        DecimalFormat df = new DecimalFormat("#,##0.00");
        
        for (int i = 0; i < cartItems.size(); i++) {
            CartItem item = cartItems.get(i);
            BigDecimal totalPrice = item.getTotalPrice();
            
            cartText.append(i + 1).append(". *").append(item.getProduct().getName()).append("*\n");
            cartText.append("   –¶–µ–Ω–∞: ").append(df.format(item.getProduct().getPrice())).append(" $\n");
            cartText.append("   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ").append(item.getQuantity()).append("\n");
            cartText.append("   –°—É–º–º–∞: ").append(df.format(totalPrice)).append(" $\n\n");
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        BigDecimal cartTotal = cartService.getCartTotal(user);
        cartText.append("*–û–±—â–∞—è —Å—É–º–º–∞:* ").append(df.format(cartTotal)).append(" $");
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
        // –≠—Ç–æ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–µ –≤–∏–¥–Ω–æ
        cartText.append("\n\n_").append(System.currentTimeMillis()).append("_");
        
        message.setText(cartText.toString());
        message.setParseMode("Markdown");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —É–¥–∞–ª–∏—Ç—å)
        for (int i = 0; i < cartItems.size(); i++) {
            CartItem item = cartItems.get(i);
            
            // –ö–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            List<InlineKeyboardButton> quantityRow = new ArrayList<>();
            
            // –ö–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            InlineKeyboardButton minusButton = new InlineKeyboardButton();
            minusButton.setText("‚ûñ");
            minusButton.setCallbackData("cart_minus:" + item.getId());
            quantityRow.add(minusButton);
            
            // –ö–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—É—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            InlineKeyboardButton quantityButton = new InlineKeyboardButton();
            quantityButton.setText(item.getQuantity().toString());
            quantityButton.setCallbackData("cart_info:" + item.getId());
            quantityRow.add(quantityButton);
            
            // –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            InlineKeyboardButton plusButton = new InlineKeyboardButton();
            plusButton.setText("‚ûï");
            plusButton.setCallbackData("cart_plus:" + item.getId());
            quantityRow.add(plusButton);
            
            // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            InlineKeyboardButton deleteButton = new InlineKeyboardButton();
            deleteButton.setText("üóëÔ∏è");
            deleteButton.setCallbackData("cart_remove:" + item.getId());
            quantityRow.add(deleteButton);
            
            rowsInline.add(quantityRow);
        }
        
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ—Ä–∑–∏–Ω–æ–π
        List<InlineKeyboardButton> actionsRow = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
        InlineKeyboardButton clearButton = new InlineKeyboardButton();
        clearButton.setText("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É");
        clearButton.setCallbackData("cart_clear");
        actionsRow.add(clearButton);
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        InlineKeyboardButton checkoutButton = new InlineKeyboardButton();
        checkoutButton.setText("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑");
        checkoutButton.setCallbackData("cart_checkout");
        actionsRow.add(checkoutButton);
        
        rowsInline.add(actionsRow);
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥
        List<InlineKeyboardButton> catalogRow = new ArrayList<>();
        InlineKeyboardButton catalogButton = new InlineKeyboardButton();
        catalogButton.setText("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥");
        catalogButton.setCallbackData("catalog");
        catalogRow.add(catalogButton);
        
        rowsInline.add(catalogRow);
        
        markupInline.setKeyboard(rowsInline);
        message.setReplyMarkup(markupInline);
        
        return message;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
     * @param chatId ID —á–∞—Ç–∞
     * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param productId ID —Ç–æ–≤–∞—Ä–∞
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    public SendMessage handleAddToCart(Long chatId, TelegramUser user, Long productId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        
        boolean success = cartService.addToCart(user, productId, 1);
        
        if (success) {
            message.setText("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
            InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
            
            List<InlineKeyboardButton> row = new ArrayList<>();
            
            // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
            InlineKeyboardButton cartButton = new InlineKeyboardButton();
            cartButton.setText("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É");
            cartButton.setCallbackData("cart");
            row.add(cartButton);
            
            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
            InlineKeyboardButton continueButton = new InlineKeyboardButton();
            continueButton.setText("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏");
            continueButton.setCallbackData("catalog");
            row.add(continueButton);
            
            rowsInline.add(row);
            markupInline.setKeyboard(rowsInline);
            message.setReplyMarkup(markupInline);
        } else {
            message.setText("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
        }
        
        return message;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
     * @param chatId ID —á–∞—Ç–∞
     * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param cartItemId ID —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
     * @param delta –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π
     */
    public SendMessage handleUpdateCartItemQuantity(Long chatId, TelegramUser user, Long cartItemId, int delta) {
        List<CartItem> cartItems = cartService.getCartItems(user);
        
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
        CartItem targetItem = null;
        for (CartItem item : cartItems) {
            if (item.getId().equals(cartItemId)) {
                targetItem = item;
                break;
            }
        }
        
        if (targetItem != null) {
            int newQuantity = targetItem.getQuantity() + delta;
            cartService.updateCartItemQuantity(user, cartItemId, newQuantity);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
        return showCart(chatId, user);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
     * @param chatId ID —á–∞—Ç–∞
     * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param cartItemId ID —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π
     */
    public SendMessage handleRemoveFromCart(Long chatId, TelegramUser user, Long cartItemId) {
        cartService.removeFromCart(user, cartItemId);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
        return showCart(chatId, user);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –∫–æ—Ä–∑–∏–Ω—ã
     * @param chatId ID —á–∞—Ç–∞
     * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    public SendMessage handleClearCart(Long chatId, TelegramUser user) {
        cartService.clearCart(user);
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.\n\n_" + System.currentTimeMillis() + "_");
        message.setParseMode("Markdown");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥
        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
        
        List<InlineKeyboardButton> catalogRow = new ArrayList<>();
        InlineKeyboardButton catalogButton = new InlineKeyboardButton();
        catalogButton.setText("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥");
        catalogButton.setCallbackData("catalog");
        catalogRow.add(catalogButton);
        rowsInline.add(catalogRow);
        
        markupInline.setKeyboard(rowsInline);
        message.setReplyMarkup(markupInline);
        
        return message;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
     * @param chatId ID —á–∞—Ç–∞
     * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    public SendMessage handleCartCheckout(Long chatId, TelegramUser user) {
        logger.info("Handling cart checkout for user {}", chatId);
        
        if (cartService.isCartEmpty(user)) {
            logger.info("Cart is empty for user {}", chatId);
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.");
            return message;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        List<CartItem> cartItems = cartService.getCartItems(user);
        logger.info("Cart items for user {}: {}", chatId, cartItems.size());
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        Map<String, String> orderData = new HashMap<>();
        orderData.put("fromCart", "true");
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        orderHandler.saveOrderData(chatId, orderData);
        logger.info("Saved order data for user {}: {}", chatId, orderData);
        
        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–¥—Ä–µ—Å—É
        if (user.getPhoneNumber() != null && !user.getPhoneNumber().isEmpty()) {
            logger.info("User {} already has phone number, skipping to address", chatId);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
            orderData.put("phone", user.getPhoneNumber());
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–¥—Ä–µ—Å–∞
            user.setState("ORDERING_ADDRESS");
            userRepository.save(user);
            logger.info("Set state to ORDERING_ADDRESS for user {}", chatId);
            
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
            List<KeyboardRow> keyboard = new ArrayList<>();
            KeyboardRow cancelRow = new KeyboardRow();
            cancelRow.add(new KeyboardButton("–û—Ç–º–µ–Ω–∞"));
            keyboard.add(cancelRow);
            keyboardMarkup.setKeyboard(keyboard);
            keyboardMarkup.setResizeKeyboard(true);
            keyboardMarkup.setOneTimeKeyboard(true);
            message.setReplyMarkup(keyboardMarkup);
            
            return message;
        } else {
            logger.info("Requesting phone number from user {}", chatId);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            user.setState("ORDERING_PHONE");
            userRepository.save(user);
            logger.info("Set state to ORDERING_PHONE for user {}", chatId);
            
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
            List<KeyboardRow> keyboard = new ArrayList<>();
            
            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            KeyboardRow row = new KeyboardRow();
            KeyboardButton button = new KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
            button.setRequestContact(true);
            row.add(button);
            keyboard.add(row);
            
            // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            KeyboardRow cancelRow = new KeyboardRow();
            cancelRow.add(new KeyboardButton("–û—Ç–º–µ–Ω–∞"));
            keyboard.add(cancelRow);
            
            keyboardMarkup.setKeyboard(keyboard);
            keyboardMarkup.setResizeKeyboard(true);
            keyboardMarkup.setOneTimeKeyboard(true);
            message.setReplyMarkup(keyboardMarkup);
            
            return message;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä—è–º—É—é –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ (–±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É)
     * @param chatId ID —á–∞—Ç–∞
     * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param productId ID —Ç–æ–≤–∞—Ä–∞
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
     */
    public SendMessage handleDirectPurchase(Long chatId, TelegramUser user, Long productId) {
        logger.info("Handling direct purchase for user {} with product ID: {}", chatId, productId);
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
        Map<String, String> orderData = new HashMap<>();
        orderData.put("productId", productId.toString());
        orderData.put("quantity", "1");
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        orderHandler.saveOrderData(chatId, orderData);
        logger.info("Saved order data for user {}: {}", chatId, orderData);
        
        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
        if (user.getPhoneNumber() != null && !user.getPhoneNumber().isEmpty()) {
            logger.info("User {} already has phone number, skipping to address", chatId);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
            orderData.put("phone", user.getPhoneNumber());
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–¥—Ä–µ—Å–∞
            user.setState("ORDERING_ADDRESS");
            userRepository.save(user);
            logger.info("Set state to ORDERING_ADDRESS for user {}", chatId);
            
            message.setText("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
            List<KeyboardRow> keyboard = new ArrayList<>();
            KeyboardRow cancelRow = new KeyboardRow();
            cancelRow.add(new KeyboardButton("–û—Ç–º–µ–Ω–∞"));
            keyboard.add(cancelRow);
            keyboardMarkup.setKeyboard(keyboard);
            keyboardMarkup.setResizeKeyboard(true);
            keyboardMarkup.setOneTimeKeyboard(true);
            message.setReplyMarkup(keyboardMarkup);
        } else {
            logger.info("Requesting phone number from user {}", chatId);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            user.setState("ORDERING_PHONE");
            userRepository.save(user);
            logger.info("Set state to ORDERING_PHONE for user {}", chatId);
            
            message.setText("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
            List<KeyboardRow> keyboard = new ArrayList<>();
            
            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            KeyboardRow row = new KeyboardRow();
            KeyboardButton button = new KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
            button.setRequestContact(true);
            row.add(button);
            keyboard.add(row);
            
            // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            KeyboardRow cancelRow = new KeyboardRow();
            cancelRow.add(new KeyboardButton("–û—Ç–º–µ–Ω–∞"));
            keyboard.add(cancelRow);
            
            keyboardMarkup.setKeyboard(keyboard);
            keyboardMarkup.setResizeKeyboard(true);
            keyboardMarkup.setOneTimeKeyboard(true);
            message.setReplyMarkup(keyboardMarkup);
        }
        
        return message;
    }
} 