package uz.uportal.telegramshop.service.bot.keyboards;

import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import uz.uportal.telegramshop.model.Category;

import java.util.ArrayList;
import java.util.List;

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
 */
@Component
public class KeyboardFactoryImpl implements KeyboardFactory {

    @Override
    public ReplyKeyboardMarkup createMainKeyboard() {
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        keyboardMarkup.setSelective(true);
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        List<KeyboardRow> keyboard = new ArrayList<>();
        
        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        KeyboardRow row1 = new KeyboardRow();
        row1.add("üõç –ö–∞—Ç–∞–ª–æ–≥");
        row1.add("üõí –ö–æ—Ä–∑–∏–Ω–∞");
        keyboard.add(row1);
        
        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        KeyboardRow row2 = new KeyboardRow();
        row2.add("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");
        row2.add("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞");
        keyboard.add(row2);
        
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    @Override
    public InlineKeyboardMarkup createCatalogKeyboard(List<Category> categories) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        for (Category category : categories) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(category.getName());
            button.setCallbackData("catalog_category_" + category.getId());
            row.add(button);
            keyboard.add(row);
        }
        
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    @Override
    public InlineKeyboardMarkup createSubcategoriesKeyboard(List<Category> subcategories, Category parentCategory) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for (Category subcategory : subcategories) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(subcategory.getName());
            // –§–æ—Ä–º–∞—Ç callback: catalog_subcategory_SUBCATEGORY_ID_PARENT_ID
            button.setCallbackData("catalog_subcategory_" + subcategory.getId() + "_" + parentCategory.getId());
            row.add(button);
            keyboard.add(row);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∫ –≥–ª–∞–≤–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        
        if (parentCategory.getParent() != null) {
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ " + parentCategory.getParent().getName());
            backButton.setCallbackData("catalog_back_to_parent_" + parentCategory.getParent().getId());
        } else {
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º");
            backButton.setCallbackData("catalog_back_to_parent_0");
        }
        
        backRow.add(backButton);
        keyboard.add(backRow);
        
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    @Override
    public InlineKeyboardMarkup createOrderConfirmationKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        List<InlineKeyboardButton> row = new ArrayList<>();
        
        InlineKeyboardButton confirmButton = new InlineKeyboardButton();
        confirmButton.setText("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å");
        confirmButton.setCallbackData("confirm_order");
        row.add(confirmButton);
        
        InlineKeyboardButton cancelButton = new InlineKeyboardButton();
        cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");
        cancelButton.setCallbackData("cancel_order");
        row.add(cancelButton);
        
        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    @Override
    public InlineKeyboardMarkup createCartKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton checkoutButton = new InlineKeyboardButton();
        checkoutButton.setText("üõç –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑");
        checkoutButton.setCallbackData("checkout");
        row1.add(checkoutButton);
        keyboard.add(row1);
        
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton clearButton = new InlineKeyboardButton();
        clearButton.setText("üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É");
        clearButton.setCallbackData("clear_cart");
        row2.add(clearButton);
        keyboard.add(row2);
        
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥");
        backButton.setCallbackData("back_to_catalog");
        row3.add(backButton);
        keyboard.add(row3);
        
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    @Override
    public ReplyKeyboardMarkup createMainMenuKeyboard(boolean isAdminOrManager) {
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        keyboardMarkup.setSelective(true);
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        List<KeyboardRow> keyboard = new ArrayList<>();
        
        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        KeyboardRow row1 = new KeyboardRow();
        row1.add("üõç –ö–∞—Ç–∞–ª–æ–≥");
        row1.add("üõí –ö–æ—Ä–∑–∏–Ω–∞");
        keyboard.add(row1);
        
        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        KeyboardRow row2 = new KeyboardRow();
        row2.add("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");
        row2.add("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞");
        keyboard.add(row2);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if (isAdminOrManager) {
            KeyboardRow row3 = new KeyboardRow();
            row3.add("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å");
            keyboard.add(row3);
        }
        
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }
    
    @Override
    public ReplyKeyboardMarkup createAdminPanelKeyboard() {
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        keyboardMarkup.setSelective(true);
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        List<KeyboardRow> keyboard = new ArrayList<>();
        
        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤");
        row1.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä");
        keyboard.add(row1);
        
        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        KeyboardRow row2 = new KeyboardRow();
        row2.add("üóÇ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
        row2.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é");
        keyboard.add(row2);
        
        // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞
        KeyboardRow row3 = new KeyboardRow();
        row3.add("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏");
        row3.add("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        keyboard.add(row3);
        
        // –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        KeyboardRow row4 = new KeyboardRow();
        row4.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞");
        keyboard.add(row4);
        
        // –ü—è—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        KeyboardRow row5 = new KeyboardRow();
        row5.add("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        keyboard.add(row5);
        
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }
    
    @Override
    public InlineKeyboardMarkup createProductManagementKeyboard(Long productId) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        List<InlineKeyboardButton> row = new ArrayList<>();
        
        InlineKeyboardButton editButton = new InlineKeyboardButton();
        editButton.setText("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
        editButton.setCallbackData("edit_product_" + productId);
        row.add(editButton);
        
        InlineKeyboardButton deleteButton = new InlineKeyboardButton();
        deleteButton.setText("üóë –£–¥–∞–ª–∏—Ç—å");
        deleteButton.setCallbackData("delete_product_" + productId);
        row.add(deleteButton);
        
        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }
    
    @Override
    public InlineKeyboardMarkup createCategoryManagementKeyboard(Long categoryId) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        List<InlineKeyboardButton> row = new ArrayList<>();
        
        InlineKeyboardButton editButton = new InlineKeyboardButton();
        editButton.setText("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
        editButton.setCallbackData("edit_category_" + categoryId);
        row.add(editButton);
        
        InlineKeyboardButton deleteButton = new InlineKeyboardButton();
        deleteButton.setText("üóë –£–¥–∞–ª–∏—Ç—å");
        deleteButton.setCallbackData("delete_category_" + categoryId);
        row.add(deleteButton);
        
        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }
    
    @Override
    public InlineKeyboardMarkup createProductPaginationKeyboard(int page, int totalPages) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        List<InlineKeyboardButton> navigationRow = new ArrayList<>();
        
        if (page > 1) {
            InlineKeyboardButton prevButton = new InlineKeyboardButton();
            prevButton.setText("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è");
            prevButton.setCallbackData("products_page_" + (page - 1));
            navigationRow.add(prevButton);
        }
        
        if (page < totalPages) {
            InlineKeyboardButton nextButton = new InlineKeyboardButton();
            nextButton.setText("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è");
            nextButton.setCallbackData("products_page_" + (page + 1));
            navigationRow.add(nextButton);
        }
        
        if (!navigationRow.isEmpty()) {
            keyboard.add(navigationRow);
        }
        
        
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }
    
    @Override
    public InlineKeyboardMarkup createCategoryPaginationKeyboard(int page, int totalPages, List<Category> categories) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for (Category category : categories) {
            // –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            List<InlineKeyboardButton> categoryRow = new ArrayList<>();
            
            InlineKeyboardButton editButton = new InlineKeyboardButton();
            editButton.setText("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
            editButton.setCallbackData("edit_category_" + category.getId());
            categoryRow.add(editButton);
            
            InlineKeyboardButton deleteButton = new InlineKeyboardButton();
            deleteButton.setText("üóë –£–¥–∞–ª–∏—Ç—å");
            deleteButton.setCallbackData("delete_category_" + category.getId());
            categoryRow.add(deleteButton);
            
            keyboard.add(categoryRow);
        }
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        List<InlineKeyboardButton> navigationRow = new ArrayList<>();
        
        if (page > 1) {
            InlineKeyboardButton prevButton = new InlineKeyboardButton();
            prevButton.setText("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è");
            prevButton.setCallbackData("categories_page_" + (page - 1));
            navigationRow.add(prevButton);
        }
        
        if (page < totalPages) {
            InlineKeyboardButton nextButton = new InlineKeyboardButton();
            nextButton.setText("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è");
            nextButton.setCallbackData("categories_page_" + (page + 1));
            navigationRow.add(nextButton);
        }
        
        if (!navigationRow.isEmpty()) {
            keyboard.add(navigationRow);
        }
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å");
        backButton.setCallbackData("back_to_admin");
        backRow.add(backButton);
        keyboard.add(backRow);
        
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }
    
    @Override
    public InlineKeyboardMarkup createCategoryPaginationKeyboard(int page, int totalPages) {
        // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return createCategoryPaginationKeyboard(page, totalPages, new ArrayList<>());
    }
    
    @Override
    public InlineKeyboardMarkup createUserPaginationKeyboard(int page, int totalPages) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        List<InlineKeyboardButton> navigationRow = new ArrayList<>();
        
        if (page > 1) {
            InlineKeyboardButton prevButton = new InlineKeyboardButton();
            prevButton.setText("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è");
            prevButton.setCallbackData("users_page_" + (page - 1));
            navigationRow.add(prevButton);
        }
        
        if (page < totalPages) {
            InlineKeyboardButton nextButton = new InlineKeyboardButton();
            nextButton.setText("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è");
            nextButton.setCallbackData("users_page_" + (page + 1));
            navigationRow.add(nextButton);
        }
        
        if (!navigationRow.isEmpty()) {
            keyboard.add(navigationRow);
        }
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å");
        backButton.setCallbackData("back_to_admin");
        backRow.add(backButton);
        keyboard.add(backRow);
        
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }
} 